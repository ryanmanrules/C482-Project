package Controller;

import Model.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import java.io.IOException;
import java.net.URL;
import java.util.Locale;
import java.util.Optional;
import java.util.ResourceBundle;

/**add product controller class*/
public class AddProduct implements Initializable {

    Stage stage;
    Parent scene;
    /**associated part list*/
    private ObservableList<Part> associatedParts = FXCollections.observableArrayList();
/**ID add product */
    @FXML
    private Button AddProductAddButton;
/** id cancel */
    @FXML
    private Button AddProductCancelButton;
/** ID product*/
    @FXML
    private TextField AddProductID;
/** ID Stock */
    @FXML
    private TextField AddProductInv;
/** ID Column stock add */
    @FXML
    private TableColumn<Part, Integer> AddProductInventoryLevelAdd;
/** ID column stock associated */
    @FXML
    private TableColumn<Part, Integer> AddProductInventoryLevelFind;
/** ID Max */
    @FXML
    private TextField AddProductMax;
/** ID Name */
    @FXML
    private TextField AddProductName;
/** ID column part ID add */
    @FXML
    private TableColumn<Part, Integer> AddProductPartIDAdd;
/** ID column ID associated part */
    @FXML
    private TableColumn<Part, Integer> AddProductPartIDFind;
/** ID column add part name */
    @FXML
    private TableColumn<Part, String> AddProductPartNameAdd;
/** ID column associated name */
    @FXML
    private TableColumn<Part, String> AddProductPartNameFind;
/** ID price */
    @FXML
    private TextField AddProductPrice;
/** ID column add part price */
    @FXML
    private TableColumn<Part, Double> AddProductPriceCostAdd;
/** ID column associated part price */
    @FXML
    private TableColumn<Part, Double> AddProductPriceCostFind;
/** ID remove button */
    @FXML
    private Button AddProductRemovePartButton;
/** ID save button */
    @FXML
    private Button AddProductSaveButton;
/** ID add part searchbar */
    @FXML
    private TextField AddProductSearchBar;
/** ID associated part searchbar */
    @FXML
    private TableView<Part> AddProductTableAdd;
/** ID min */
    @FXML
    private TextField AddProductmin;
    /**associated partlist table */
    @FXML
    private TableView<Part> AddProductTableFind;
/** add selected part to associated part table */
    @FXML
    void OnActionAddButton(ActionEvent event) {

        Part selectedPart = AddProductTableFind.getSelectionModel().getSelectedItem();
        if(selectedPart == null)
        {
            displayAlert(5);
        }
        else
        {
            associatedParts.add(selectedPart);
            AddProductTableAdd.setItems(associatedParts);
        }

    }
    /** search for parts within inventory part list by ID or name, alert if not found */
    @FXML
    void OnActionSearchBar(ActionEvent event)
     {
         ObservableList<Part> allParts = Inventory.getAllParts();
         ObservableList<Part> results = FXCollections.observableArrayList();
         String search = AddProductSearchBar.getText();
         for(Part part : allParts)
         {
             if(String.valueOf(part.getId()).contains(search)
                     || (part.getName()).toLowerCase(Locale.ROOT).contains(search))
             {
                 results.add(part);
             }
         }
         AddProductTableFind.setItems(results);
         if(results.size() == 0)
         {
             displayAlert(1);
         }
    }
/** remove selected associated part from associated part table, if nothing is selected alert */
    @FXML
    void OnActionRemovePart(ActionEvent event) {

        Part selectedPart = AddProductTableAdd.getSelectionModel().getSelectedItem();

        if (selectedPart == null) {
            displayAlert(5);
        } else {

            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Alert");
            alert.setContentText("Do you want to remove the selected part?");
            Optional<ButtonType> result = alert.showAndWait();

            if (result.isPresent() && result.get() == ButtonType.OK) {
                associatedParts.remove(selectedPart);
                AddProductTableAdd.setItems(associatedParts);
            }
        }

    }
    /**set save button to save data from field with various rules, and alerts if false*/
    @FXML
    void OnActionSaveButton(ActionEvent event) throws IOException {
        try {
            /**id will just return an autogenerated incremented int the rest will be user parsed */
            int id = 0;
            String Name = AddProductName.getText();
            int Inv = Integer.parseInt(AddProductInv.getText());
            int max = Integer.parseInt(AddProductMax.getText());
            int min = Integer.parseInt(AddProductmin.getText());
            /**runtime error had integer.parseint instead of double.parsedouble */
            double PriceCost = Double.parseDouble(AddProductPrice.getText());

/**if statement to catch all alerts for data input
            make sure name is not empty*/
            if (Name.isEmpty()) {
                displayAlert(6);
            } else {
                /**input values for min max inv */
                if (setMin(min, max) && setInventory(min, max, Inv)) {
                    Product product = new Product(id, Name, PriceCost, Inv, min, max);
                    for (Part part : associatedParts) {
                        product.addAssociatedPart(part);
                    }
                    product.setId(Inventory.uniqueProductId());
                    Inventory.addProduct(product);
                    stage = (Stage) (((Button) event.getSource()).getScene().getWindow());
                    scene = FXMLLoader.load(getClass().getResource("/Views/FirstScreen.fxml"));
                    stage.setScene(new Scene(scene));
                    stage.show();
                }
            }
        } catch (Exception e) {
            displayAlert(1);
        }
    }
    /**boolean that sets values for min so it's not below 0 or => max's value*/
    private boolean setMin (int min, int max)
    {
        boolean good = true;
        if(min <= 0 || min >= max)
        {
            good = false;
            displayAlert(3);
        }
        return good;
    }
    /**boolean statement that only accepts values from inventory that are below min, or inventory that is above max*/
    private boolean setInventory(int min, int max, int Inv)
    {
        boolean good = true;
        if(Inv < min || Inv > max)
        {
            good = false;
            displayAlert(4);
        }
        return good;
    }
    /**switch alerts for all the errors that can appear*/
    private void displayAlert(int alerts){
        Alert alert = new Alert(Alert.AlertType.ERROR);

        switch (alerts)
        {
            case 1:
                alert.setTitle("Whoops!");
                alert.setContentText("There are some blank or incorrect values!");
                alert.showAndWait();
                break;
            case 2:
                alert.setTitle("Whoops!");
                alert.setContentText("No part found.");
                alert.showAndWait();
                break;
            case 3:
                alert.setTitle("Whoops!");
                alert.setContentText("Min has to be greater then 0 AND less then max!");
                alert.showAndWait();
                break;
            case 4:
                alert.setTitle("Whoops!");
                alert.setContentText("The Inventory field must be a number between Min and Max!");
                alert.showAndWait();
                break;
            case 5:
                alert.setTitle("Whoops!");
                alert.setContentText("No part selected!");
                alert.showAndWait();
                break;
            case 6:
                alert.setTitle("Error");
                alert.setHeaderText("Name Empty");
                alert.setContentText("Name cannot be empty.");
                alert.showAndWait();
                break;
        }

    }
    /**set the cancel button to load back to first screen when clicked and gives an alert any existing data will not be saved*/
    @FXML
    void OnActionCancelButton(ActionEvent event) throws IOException {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "This will cancel and remove any current data on this screen, please confirm.");
        Optional<ButtonType> result = alert.showAndWait();
        if(result.isPresent() && result.get() == ButtonType.OK) {
            stage = (Stage) (((Button) event.getSource()).getScene().getWindow());
            scene = FXMLLoader.load(getClass().getResource("/Views/FirstScreen.fxml"));
            stage.setScene(new Scene(scene));
            stage.show();
        }
    }
    /** Initializes tables with inventory's part list, and table view for null associated part data*/
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        AddProductPartIDFind.setCellValueFactory(new PropertyValueFactory<>("id"));
        AddProductPartNameFind.setCellValueFactory(new PropertyValueFactory<>("name"));
        AddProductInventoryLevelFind.setCellValueFactory(new PropertyValueFactory<>("stock"));
        AddProductPriceCostFind.setCellValueFactory(new PropertyValueFactory<>("price"));
        AddProductTableFind.setItems(Inventory.getAllParts());

        AddProductPartIDAdd.setCellValueFactory(new PropertyValueFactory<>("id"));
        AddProductPartNameAdd.setCellValueFactory(new PropertyValueFactory<>("name"));
        AddProductInventoryLevelAdd.setCellValueFactory(new PropertyValueFactory<>("stock"));
        AddProductPriceCostAdd.setCellValueFactory(new PropertyValueFactory<>("price"));
    }
}
